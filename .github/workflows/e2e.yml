name: E2E (Playwright)

on:
  workflow_dispatch:
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        layout: [cose-bilkent, dagre]
        sprite: ["0", "1"]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Launch stack (server+client+deps)
        run: |
          docker compose -f docker-compose.yml up -d --build postgres neo4j redis
          sleep 8
          docker compose -f docker-compose.yml up -d --build server client
          # wait for client and server
          for i in {1..60}; do curl -fsS http://localhost:4000/health && break || sleep 2; done
          for i in {1..60}; do curl -fsS http://localhost:3000 || sleep 2; done
      - name: Install client deps
        run: cd client && npm ci
      - name: Run E2E tests (layout=${{ matrix.layout }}, sprite=${{ matrix.sprite }})
        env:
          LAYOUT: ${{ matrix.layout }}
          SPRITE_LABELS: ${{ matrix.sprite }}
        run: cd client && npm run test:e2e
      - name: Dump compose logs (on failure)
        if: failure()
        run: docker compose -f docker-compose.yml logs --no-color server client | tail -n 300
      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml down -v

  e2e-analytics-bridge:
    name: E2E (Analytics Bridge)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Launch backend stack (Redis+server)
        env:
          DISABLE_SOCKET_AUTH: "1"
        run: |
          docker compose -f docker-compose.yml up -d --build redis postgres neo4j
          # launch server with auth bypass for analytics namespace
          docker compose -f docker-compose.yml up -d --build server
          # wait for server
          for i in {1..60}; do curl -fsS http://localhost:4000/health && break || sleep 2; done
      - name: Install client deps
        run: cd client && npm ci
      - name: Run analytics bridge E2E
        env:
          E2E_WS_URL: http://localhost:4000
          E2E_REDIS_URL: redis://localhost:6379/1
        run: cd client && npm run test:e2e -- tests/e2e/analytics-bridge.spec.ts
      - name: Dump server logs (on failure)
        if: failure()
        run: docker compose -f docker-compose.yml logs --no-color server | tail -n 400
      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml down -v
